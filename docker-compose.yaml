---
version: "3.9"
services:
  chatbot:
    container_name: chatbot
    build:
      context: ./chatbot/
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DJANGO_URL=${DJANGO_URL}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI}
      - POSTGRES_HOSTNAME=${POSTGRES_HOSTNAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RSA_PRIVATE_KEY=${RSA_PRIVATE_KEY}
      - RSA_PUBLIC_KEY=${RSA_PUBLIC_KEY}
    restart: unless-stopped
    networks:
      - discobot
    depends_on:
      - postgredb
    # Allows completing spotify OAuth process via terminal:
    stdin_open: true
    tty: true
    command: sh -c "/wait-for ${POSTGRES_HOSTNAME}:${POSTGRES_PORT} && python -u ./chatbot/chatbot.py"

  postgredb:
    image: postgres
    hostname: ${POSTGRES_HOSTNAME}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./debug_volumes/postgre_db/:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - discobot

  # Disable adminer for production
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - discobot

  # ==== BACKEND ====
  web:
    build: ./web
    command: python manage.py runserver 0.0.0.0:8000
    # Debug: map volume over copied code
    volumes:
      - ./web:/web
    ports:
      - "8000:8000"
    depends_on:
      - postgredb
    environment:
      - POSTGRES_HOSTNAME=${POSTGRES_HOSTNAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - discobot

networks:
  discobot: